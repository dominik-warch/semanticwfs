<div id="mapid" style="height: 500px;"><script>
if(epsg!="" && epsg in epsgdefs){
	geojson=convertGeoJSON(geojson,epsgdefs[epsg])
	console.log(geojson);
}
var map = L.map('mapid',{fullscreenControl: true,fullscreenControlOptions: {position: 'topleft'}}).setView([51.505, -0.09], 13);
var wmsLayer = L.tileLayer.wms('https://sgx.geodatenzentrum.de/wms_topplus_web_open', {
layers: 'web',
format: 'image/png',
 transparent: true,
attribution: '&copy; Bundesamt f&uuml;r Kartographie und Geod&auml;sie 2017, <a href="http://sg.geodatenzentrum.de/web_public/Datenquellen_TopPlus_Open.pdf">Datenquellen</a>'
}); 
var layer=L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'});
var baseMaps = {"OSM": layer,"BKG":wmsLayer}; baseMaps["OSM"].addTo(map);	L.control.scale({
	position: 'bottomright',
	imperial: false
}).addTo(map);
$( document ).ready(function() {
	$('#queryres').DataTable();
});

function saveTextAsFile(tosave,fileext,filename)
{
    var a = document.createElement('a');
    a.style = "display: none";  
    var blob= new Blob([tosave], {type:'text/plain'});
    var url = window.URL.createObjectURL(blob);
    var filename = filename+fileext;
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(function(){
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);  
    }, 1000);
}

function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  console.log(color)
  return color;
}
var colormap={}
var layercontrol=L.control.layers(baseMaps,overlayMaps).addTo(map);
var geojsonlayer=L.geoJSON(geojson["features"], {
style: function(feature){
	return {
        fillColor: 'blue',
        weight: 2,
        opacity: 1,
        color: 'white',  //Outline color
        fillOpacity: 0.7
    };
},
coordsToLatLng: function (coords) {
	if(typeof coords[0] !== 'undefined' && typeof coords[1] !== 'undefined' && typeof coords[2] !== 'undefined'){
		return new L.LatLng(coords[1], coords[0], coords[2]);
	}
	if(typeof coords[0] !== 'undefined'){
		return new L.LatLng(coords[1], coords[2], coords[0]);
	}
	return new L.LatLng(coords[0], coords[1]);
},		
pointToLayer: function(feature, latlng){
			var color="";
			if(typeColumn==""){
				if(!("" in colormap)){
					colormap[""]=getRandomColor();
				}
				color=colormap[""];
			}else{
				if(typeColumn in feature.properties){
					if(!(feature.properties[typeColumn] in colormap)){
						colormap[feature.properties[typeColumn]]=getRandomColor();
					}
					color=colormap[feature.properties[typeColumn]]
				}else{
					if(!("" in colormap)){
					colormap[""]=getRandomColor();
					}
					color=colormap[""];
				}
			}
			 var greenIcon = L.divIcon({
				className: "my-custom-pin",
				iconAnchor: [0, 24],
				labelAnchor: [-6, 0],
				popupAnchor: [0, -36],
				html: "<span style=\"background-color: "+color+"; width: 1.5rem;height: 1.5rem;display: block;left: -1rem;top: 0rem;position: relative;border-radius: 3rem 3rem 0;transform: rotate(45deg);border: 1px solid #FFFFFF;\"/>"
			});
            return L.marker(latlng,{icon: greenIcon})
},
onEachFeature: function (feature, layer) {
	 var popup="Item: <a href='"+feature.id+"' target='_blank'>"+(feature.id.includes('#')?feature.id.substring(feature.id.lastIndexOf('#')+1):feature.id)+"</a><br/>Properties:<ul>"
   Object.keys(feature.properties).sort().forEach(function(prop) {
 if(prop.includes("http") && prop.includes("#")){
	 	popup+="<li><a href='"+prop+"' target='_blank'>"+prop.substring(prop.lastIndexOf('#')+1)+"</a> - "
 }else if(prop.includes("http")){
	 	popup+="<li><a href='"+prop+"' target='_blank'>"+prop.substring(prop.lastIndexOf('/')+1)+"</a> - "
 }else{
	 	popup+="<li>"+prop+" - "
	 }
 if(feature.properties[prop].includes("http") && feature.properties[prop].includes("^^")){
     popup+="<a href='"+feature.properties[prop]+"' target='_blank'>"+feature.properties[prop].substring(0,feature.properties[prop].lastIndexOf('^')-1)+"</a></li>"
 }else if(feature.properties[prop].includes("http") && feature.properties[prop].includes("#")){
     popup+="<a href='"+feature.properties[prop]+"' target='_blank'>"+feature.properties[prop].substring(feature.properties[prop].lastIndexOf('#')+1)+"</a></li>"
 }else if(feature.properties[prop].includes("http") || feature.properties[prop].includes("file:/")){
     popup+="<a href='"+feature.properties[prop]+"' target='_blank'>"+feature.properties[prop].substring(feature.properties[prop].lastIndexOf('/')+1)+"</a></li>"
 }else{
  popup+=feature.properties[prop]+"</li>"
	 }});popup+="</ul>"
	 console.log(feature)
         layer.bindPopup(popup,{maxWidth : 560});
 }}).addTo(map);map.fitBounds(geojsonlayer.getBounds());</script>
 </div>